using UnityEngine;
using System.Collections;
using Hospital;
namespace IsoEngine
{
#pragma warning disable 649

	/// <summary>
	/// Stores information about prefab. 
	/// This object should be only generated by the object creator.
	/// </summary>
	public class IsoObjectPrefabData : ScriptableObject
	{
		/// <summary>
		/// Stores information about the tiles of a prefab.
		/// This object should be only generated by the object creator.
		/// </summary>
		[System.Serializable, SerializeField]
		internal class TileData
		{
			/// <summary>
			/// Array containing information about all the layers on the tile.
			/// </summary>
			[SerializeField]
			internal LayerData[] layers;

			/// <summary>
			/// Tells whether the AI sees the tile as possible to pass through.
			/// </summary>
			[SerializeField]
			internal bool isPassable;

            /// <summary>
            /// Tells whether tile is 
            /// </summary>
            [SerializeField]
            internal bool isMutal;
        }

		/// <summary>
		/// Stores information about the layers of a tile.
		/// This object should be only generated by the object creator.
		/// </summary>
		[System.Serializable]
		internal class LayerData
		{
			/// <summary>
			/// The ID of the sprite specified in the engine that will be displayed.
			/// </summary>
			[SerializeField]
			internal int spriteID;

			/// <summary>
			/// Tells weather the layer is transparent or not.
			/// When set to false the layer will cover all the layers beneath on the layer stack of a tile.
			/// </summary>
			[SerializeField]
			internal bool isTransparent;
		}

		/// <summary>
		/// Stores information about spots on the tile.
		/// This object should be only generated by the object creator.
		/// </summary>
		[System.Serializable]
		public class SpotData
		{
			/// <summary>
			/// The x coordinate of a tile the spot lies on.
			/// </summary>
			[SerializeField]
			internal int x;

			/// <summary>
			/// The y coordinate of a tile the spot lies on.
			/// </summary>
			[SerializeField]
			internal int y;

			[SerializeField]
			internal int id;

			/// <summary>
			/// The direction of the spot.
			/// </summary>
			[SerializeField]
			internal Vector2 direction;
		}

        /// <summary>
        /// The width of the object in tiles.
        /// </summary>

        /// <summary>
        /// The width of the object in tiles.
        /// </summary>
        [SerializeField]
		internal int tilesX;

		/// <summary>
		/// The height of the object in tiles. 
		/// </summary>
		[SerializeField]
		internal int tilesY;

		[SerializeField]
		internal int id;

		public HospitalArea area=HospitalArea.Ignore;

		public Rotation rotation;

		public bool hasWalls;
		public IsoWallData walls;
		public Vector2 rotationPoint;

		/// <summary>
		/// Information about all the tiles that are part of the object.
		/// The [x,y] tile has the index of [x * tilesY + y].
		/// </summary>
		[SerializeField]
		internal TileData[] tilesData;

        [SerializeField]
        public MutalType mutalTiles;

        /// <summary>
        /// Information abount all the spots that are part of the object.
        /// </summary>
        [SerializeField]
		public SpotData[] spotsData;

        [HideInInspector]
        public PathType[] pathTypes;
	}
#pragma warning restore 649
}